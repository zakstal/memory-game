{"version":3,"sources":["backbone.js"],"names":["factory","root","self","global","define","amd","_","$","exports","Backbone","require","e","jQuery","Zepto","ender","previousBackbone","slice","VERSION","noConflict","this","emulateHTTP","emulateJSON","addMethod","length","method","attribute","value","iteratee","context","defaultVal","args","call","arguments","unshift","apply","addUnderscoreMethods","Class","methods","each","prototype","Events","eventSplitter","eventsApi","memo","name","callback","opts","names","i","keys","test","split","on","internalOn","obj","listening","_events","onApi","ctx","listeners","_listeners","id","listenTo","_listenId","uniqueId","listeningTo","_listeningTo","thisId","objId","count","events","options","handlers","push","off","offApi","stopListening","ids","isEmpty","remaining","j","handler","_callback","size","once","onceMap","bind","listenToOnce","map","offer","trigger","Math","max","Array","triggerApi","objEvents","cb","allEvents","all","triggerEvents","concat","ev","l","a1","a2","a3","unbind","extend","Model","attributes","attrs","cid","cidPrefix","collection","parse","defaults","result","set","changed","initialize","validationError","idAttribute","toJSON","clone","sync","get","attr","escape","has","matches","key","val","_validate","unset","silent","changes","changing","_changing","_previousAttributes","current","prev","isEqual","_pending","clear","hasChanged","changedAttributes","diff","old","previous","previousAttributes","fetch","model","success","resp","serverAttrs","wrapError","save","validate","wait","isNew","patch","xhr","destroy","defer","url","base","urlError","replace","encodeURIComponent","constructor","isValid","error","modelMethods","values","pairs","invert","pick","omit","chain","Collection","models","comparator","_reset","reset","setOptions","add","remove","merge","addOptions","singular","isArray","removed","_removeModels","_isModel","existing","sort","at","sortable","sortAttr","isString","toAdd","toRemove","modelMap","order","orderChanged","_prepareModel","_addReference","modelId","splice","orderedModels","addOpts","index","_removeReference","previousModels","pop","shift","_byId","where","first","findWhere","Error","sortBy","pluck","invoke","create","callbackOpts","indexOf","_onModelEvent","event","prevId","collectionMethods","forEach","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","some","any","include","contains","min","toArray","head","take","initial","rest","tail","drop","last","without","difference","shuffle","lastIndexOf","sample","partition","attributeMethods","iterator","isFunction","View","viewOptions","_ensureElement","delegateEventSplitter","tagName","selector","$el","render","_removeElement","setElement","element","undelegateEvents","_setElement","delegateEvents","el","match","delegate","eventName","listener","undelegate","_createElement","document","createElement","className","_setAttributes","type","methodMap","params","dataType","data","contentType","JSON","stringify","_method","beforeSend","setRequestHeader","processData","textStatus","errorThrown","ajax","update","delete","read","Router","routes","_bindRoutes","optionalParam","namedParam","splatParam","escapeRegExp","route","isRegExp","_routeToRegExp","router","history","fragment","_extractParameters","execute","navigate","optional","RegExp","exec","param","decodeURIComponent","History","bindAll","window","location","routeStripper","rootStripper","pathStripper","started","interval","atRoot","path","pathname","getSearch","matchRoot","decodeFragment","decodeURI","href","getHash","getPath","charAt","getFragment","_usePushState","_wantsHashChange","start","hashChange","_hasHashChange","_useHashChange","_wantsPushState","pushState","_hasPushState","iframe","src","style","display","tabIndex","body","iWindow","insertBefore","firstChild","contentWindow","open","close","hash","addEventListener","attachEvent","checkUrl","_checkUrlInterval","setInterval","loadUrl","stop","removeEventListener","detachEvent","removeChild","clearInterval","title","assign","_updateHash","protoProps","staticProps","child","parent","Surrogate","__super__"],"mappings":"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","file":"vendor.js","sourcesContent":["//     Backbone.js 1.2.1\n\n//     (c) 2010-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n\n(function(factory) {\n\n  // Establish the root object, `window` (`self`) in the browser, or `global` on the server.\n  // We use `self` instead of `window` for `WebWorker` support.\n  var root = (typeof self == 'object' && self.self == self && self) ||\n            (typeof global == 'object' && global.global == global && global);\n\n  // Set up Backbone appropriately for the environment. Start with AMD.\n  if (typeof define === 'function' && define.amd) {\n    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {\n      // Export global even in AMD case in case this script is loaded with\n      // others that may still expect a global Backbone.\n      root.Backbone = factory(root, exports, _, $);\n    });\n\n  // Next for Node.js or CommonJS. jQuery may not be needed as a module.\n  } else if (typeof exports !== 'undefined') {\n    var _ = require('underscore'), $;\n    try { $ = require('jquery'); } catch(e) {}\n    factory(root, exports, _, $);\n\n  // Finally, as a browser global.\n  } else {\n    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));\n  }\n\n}(function(root, Backbone, _, $) {\n\n  // Initial Setup\n  // -------------\n\n  // Save the previous value of the `Backbone` variable, so that it can be\n  // restored later on, if `noConflict` is used.\n  var previousBackbone = root.Backbone;\n\n  // Create a local reference to a common array method we'll want to use later.\n  var slice = [].slice;\n\n  // Current version of the library. Keep in sync with `package.json`.\n  Backbone.VERSION = '1.2.1';\n\n  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\n  // the `$` variable.\n  Backbone.$ = $;\n\n  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\n  // to its previous owner. Returns a reference to this Backbone object.\n  Backbone.noConflict = function() {\n    root.Backbone = previousBackbone;\n    return this;\n  };\n\n  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n  // will fake `\"PATCH\"`, `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n  // set a `X-Http-Method-Override` header.\n  Backbone.emulateHTTP = false;\n\n  // Turn on `emulateJSON` to support legacy servers that can't deal with direct\n  // `application/json` requests ... this will encode the body as\n  // `application/x-www-form-urlencoded` instead and will send the model in a\n  // form param named `model`.\n  Backbone.emulateJSON = false;\n\n  // Proxy Underscore methods to a Backbone class' prototype using a\n  // particular attribute as the data argument\n  var addMethod = function(length, method, attribute) {\n    switch (length) {\n      case 1: return function() {\n        return _[method](this[attribute]);\n      };\n      case 2: return function(value) {\n        return _[method](this[attribute], value);\n      };\n      case 3: return function(iteratee, context) {\n        return _[method](this[attribute], iteratee, context);\n      };\n      case 4: return function(iteratee, defaultVal, context) {\n        return _[method](this[attribute], iteratee, defaultVal, context);\n      };\n      default: return function() {\n        var args = slice.call(arguments);\n        args.unshift(this[attribute]);\n        return _[method].apply(_, args);\n      };\n    }\n  };\n  var addUnderscoreMethods = function(Class, methods, attribute) {\n    _.each(methods, function(length, method) {\n      if (_[method]) Class.prototype[method] = addMethod(length, method, attribute);\n    });\n  };\n\n  // Backbone.Events\n  // ---------------\n\n  // A module that can be mixed in to *any object* in order to provide it with\n  // custom events. You may bind with `on` or remove with `off` callback\n  // functions to an event; `trigger`-ing an event fires all callbacks in\n  // succession.\n  //\n  //     var object = {};\n  //     _.extend(object, Backbone.Events);\n  //     object.on('expand', function(){ alert('expanded'); });\n  //     object.trigger('expand');\n  //\n  var Events = Backbone.Events = {};\n\n  // Regular expression used to split event strings.\n  var eventSplitter = /\\s+/;\n\n  // Iterates over the standard `event, callback` (as well as the fancy multiple\n  // space-separated events `\"change blur\", callback` and jQuery-style event\n  // maps `{event: callback}`), reducing them by manipulating `memo`.\n  // Passes a normalized single event name and callback, as well as any\n  // optional `opts`.\n  var eventsApi = function(iteratee, memo, name, callback, opts) {\n    var i = 0, names;\n    if (name && typeof name === 'object') {\n      // Handle event maps.\n      if (callback !== void 0 && 'context' in opts && opts.context === void 0) opts.context = callback;\n      for (names = _.keys(name); i < names.length ; i++) {\n        memo = iteratee(memo, names[i], name[names[i]], opts);\n      }\n    } else if (name && eventSplitter.test(name)) {\n      // Handle space separated event names.\n      for (names = name.split(eventSplitter); i < names.length; i++) {\n        memo = iteratee(memo, names[i], callback, opts);\n      }\n    } else {\n      memo = iteratee(memo, name, callback, opts);\n    }\n    return memo;\n  };\n\n  // Bind an event to a `callback` function. Passing `\"all\"` will bind\n  // the callback to all events fired.\n  Events.on = function(name, callback, context) {\n    return internalOn(this, name, callback, context);\n  };\n\n  // An internal use `on` function, used to guard the `listening` argument from\n  // the public API.\n  var internalOn = function(obj, name, callback, context, listening) {\n    obj._events = eventsApi(onApi, obj._events || {}, name, callback, {\n        context: context,\n        ctx: obj,\n        listening: listening\n    });\n\n    if (listening) {\n      var listeners = obj._listeners || (obj._listeners = {});\n      listeners[listening.id] = listening;\n    }\n\n    return obj;\n  };\n\n  // Inversion-of-control versions of `on`. Tell *this* object to listen to\n  // an event in another object... keeping track of what it's listening to.\n  Events.listenTo =  function(obj, name, callback) {\n    if (!obj) return this;\n    var id = obj._listenId || (obj._listenId = _.uniqueId('l'));\n    var listeningTo = this._listeningTo || (this._listeningTo = {});\n    var listening = listeningTo[id];\n\n    // This object is not listening to any other events on `obj` yet.\n    // Setup the necessary references to track the listening callbacks.\n    if (!listening) {\n      var thisId = this._listenId || (this._listenId = _.uniqueId('l'));\n      listening = listeningTo[id] = {obj: obj, objId: id, id: thisId, listeningTo: listeningTo, count: 0};\n    }\n\n    // Bind callbacks on obj, and keep track of them on listening.\n    internalOn(obj, name, callback, this, listening);\n    return this;\n  };\n\n  // The reducing API that adds a callback to the `events` object.\n  var onApi = function(events, name, callback, options) {\n    if (callback) {\n      var handlers = events[name] || (events[name] = []);\n      var context = options.context, ctx = options.ctx, listening = options.listening;\n      if (listening) listening.count++;\n\n      handlers.push({ callback: callback, context: context, ctx: context || ctx, listening: listening });\n    }\n    return events;\n  };\n\n  // Remove one or many callbacks. If `context` is null, removes all\n  // callbacks with that function. If `callback` is null, removes all\n  // callbacks for the event. If `name` is null, removes all bound\n  // callbacks for all events.\n  Events.off =  function(name, callback, context) {\n    if (!this._events) return this;\n    this._events = eventsApi(offApi, this._events, name, callback, {\n        context: context,\n        listeners: this._listeners\n    });\n    return this;\n  };\n\n  // Tell this object to stop listening to either specific events ... or\n  // to every object it's currently listening to.\n  Events.stopListening =  function(obj, name, callback) {\n    var listeningTo = this._listeningTo;\n    if (!listeningTo) return this;\n\n    var ids = obj ? [obj._listenId] : _.keys(listeningTo);\n\n    for (var i = 0; i < ids.length; i++) {\n      var listening = listeningTo[ids[i]];\n\n      // If listening doesn't exist, this object is not currently\n      // listening to obj. Break out early.\n      if (!listening) break;\n\n      listening.obj.off(name, callback, this);\n    }\n    if (_.isEmpty(listeningTo)) this._listeningTo = void 0;\n\n    return this;\n  };\n\n  // The reducing API that removes a callback from the `events` object.\n  var offApi = function(events, name, callback, options) {\n    // No events to consider.\n    if (!events) return;\n\n    var i = 0, listening;\n    var context = options.context, listeners = options.listeners;\n\n    // Delete all events listeners and \"drop\" events.\n    if (!name && !callback && !context) {\n      var ids = _.keys(listeners);\n      for (; i < ids.length; i++) {\n        listening = listeners[ids[i]];\n        delete listeners[listening.id];\n        delete listening.listeningTo[listening.objId];\n      }\n      return;\n    }\n\n    var names = name ? [name] : _.keys(events);\n    for (; i < names.length; i++) {\n      name = names[i];\n      var handlers = events[name];\n\n      // Bail out if there are no events stored.\n      if (!handlers) break;\n\n      // Replace events if there are any remaining.  Otherwise, clean up.\n      var remaining = [];\n      for (var j = 0; j < handlers.length; j++) {\n        var handler = handlers[j];\n        if (\n          callback && callback !== handler.callback &&\n            callback !== handler.callback._callback ||\n              context && context !== handler.context\n        ) {\n          remaining.push(handler);\n        } else {\n          listening = handler.listening;\n          if (listening && --listening.count === 0) {\n            delete listeners[listening.id];\n            delete listening.listeningTo[listening.objId];\n          }\n        }\n      }\n\n      // Update tail event if the list has any events.  Otherwise, clean up.\n      if (remaining.length) {\n        events[name] = remaining;\n      } else {\n        delete events[name];\n      }\n    }\n    if (_.size(events)) return events;\n  };\n\n  // Bind an event to only be triggered a single time. After the first time\n  // the callback is invoked, it will be removed. When multiple events are\n  // passed in using the space-separated syntax, the event will fire once for every\n  // event you passed in, not once for a combination of all events\n  Events.once =  function(name, callback, context) {\n    // Map the event into a `{event: once}` object.\n    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.off, this));\n    return this.on(events, void 0, context);\n  };\n\n  // Inversion-of-control versions of `once`.\n  Events.listenToOnce =  function(obj, name, callback) {\n    // Map the event into a `{event: once}` object.\n    var events = eventsApi(onceMap, {}, name, callback, _.bind(this.stopListening, this, obj));\n    return this.listenTo(obj, events);\n  };\n\n  // Reduces the event callbacks into a map of `{event: onceWrapper}`.\n  // `offer` unbinds the `onceWrapper` after it has been called.\n  var onceMap = function(map, name, callback, offer) {\n    if (callback) {\n      var once = map[name] = _.once(function() {\n        offer(name, once);\n        callback.apply(this, arguments);\n      });\n      once._callback = callback;\n    }\n    return map;\n  };\n\n  // Trigger one or many events, firing all bound callbacks. Callbacks are\n  // passed the same arguments as `trigger` is, apart from the event name\n  // (unless you're listening on `\"all\"`, which will cause your callback to\n  // receive the true name of the event as the first argument).\n  Events.trigger =  function(name) {\n    if (!this._events) return this;\n\n    var length = Math.max(0, arguments.length - 1);\n    var args = Array(length);\n    for (var i = 0; i < length; i++) args[i] = arguments[i + 1];\n\n    eventsApi(triggerApi, this._events, name, void 0, args);\n    return this;\n  };\n\n  // Handles triggering the appropriate event callbacks.\n  var triggerApi = function(objEvents, name, cb, args) {\n    if (objEvents) {\n      var events = objEvents[name];\n      var allEvents = objEvents.all;\n      if (events && allEvents) allEvents = allEvents.slice();\n      if (events) triggerEvents(events, args);\n      if (allEvents) triggerEvents(allEvents, [name].concat(args));\n    }\n    return objEvents;\n  };\n\n  // A difficult-to-believe, but optimized internal dispatch function for\n  // triggering events. Tries to keep the usual cases speedy (most internal\n  // Backbone events have 3 arguments).\n  var triggerEvents = function(events, args) {\n    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\n    switch (args.length) {\n      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;\n      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;\n      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;\n      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;\n      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;\n    }\n  };\n\n  // Aliases for backwards compatibility.\n  Events.bind   = Events.on;\n  Events.unbind = Events.off;\n\n  // Allow the `Backbone` object to serve as a global event bus, for folks who\n  // want global \"pubsub\" in a convenient place.\n  _.extend(Backbone, Events);\n\n  // Backbone.Model\n  // --------------\n\n  // Backbone **Models** are the basic data object in the framework --\n  // frequently representing a row in a table in a database on your server.\n  // A discrete chunk of data and a bunch of useful, related methods for\n  // performing computations and transformations on that data.\n\n  // Create a new model with the specified attributes. A client id (`cid`)\n  // is automatically generated and assigned for you.\n  var Model = Backbone.Model = function(attributes, options) {\n    var attrs = attributes || {};\n    options || (options = {});\n    this.cid = _.uniqueId(this.cidPrefix);\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize.apply(this, arguments);\n  };\n\n  // Attach all inheritable methods to the Model prototype.\n  _.extend(Model.prototype, Events, {\n\n    // A hash of attributes whose current and previous value differ.\n    changed: null,\n\n    // The value returned during the last failed validation.\n    validationError: null,\n\n    // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n    // CouchDB users may want to set this to `\"_id\"`.\n    idAttribute: 'id',\n\n    // The prefix is used to create the client id which is used to identify models locally.\n    // You may want to override this if you're experiencing name clashes with model ids.\n    cidPrefix: 'c',\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Return a copy of the model's `attributes` object.\n    toJSON: function(options) {\n      return _.clone(this.attributes);\n    },\n\n    // Proxy `Backbone.sync` by default -- but override this if you need\n    // custom syncing semantics for *this* particular model.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Get the value of an attribute.\n    get: function(attr) {\n      return this.attributes[attr];\n    },\n\n    // Get the HTML-escaped value of an attribute.\n    escape: function(attr) {\n      return _.escape(this.get(attr));\n    },\n\n    // Returns `true` if the attribute contains a value that is not null\n    // or undefined.\n    has: function(attr) {\n      return this.get(attr) != null;\n    },\n\n    // Special-cased proxy to underscore's `_.matches` method.\n    matches: function(attrs) {\n      return !!_.iteratee(attrs, this)(this.attributes);\n    },\n\n    // Set a hash of model attributes on the object, firing `\"change\"`. This is\n    // the core primitive operation of a model, updating the data and notifying\n    // anyone who needs to know about the change in state. The heart of the beast.\n    set: function(key, val, options) {\n      if (key == null) return this;\n\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      var attrs;\n      if (typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options || (options = {});\n\n      // Run validation.\n      if (!this._validate(attrs, options)) return false;\n\n      // Extract attributes and options.\n      var unset      = options.unset;\n      var silent     = options.silent;\n      var changes    = [];\n      var changing   = this._changing;\n      this._changing = true;\n\n      if (!changing) {\n        this._previousAttributes = _.clone(this.attributes);\n        this.changed = {};\n      }\n\n      var current = this.attributes;\n      var changed = this.changed;\n      var prev    = this._previousAttributes;\n\n      // Check for changes of `id`.\n      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];\n\n      // For each `set` attribute, update or delete the current value.\n      for (var attr in attrs) {\n        val = attrs[attr];\n        if (!_.isEqual(current[attr], val)) changes.push(attr);\n        if (!_.isEqual(prev[attr], val)) {\n          changed[attr] = val;\n        } else {\n          delete changed[attr];\n        }\n        unset ? delete current[attr] : current[attr] = val;\n      }\n\n      // Trigger all relevant attribute changes.\n      if (!silent) {\n        if (changes.length) this._pending = options;\n        for (var i = 0; i < changes.length; i++) {\n          this.trigger('change:' + changes[i], this, current[changes[i]], options);\n        }\n      }\n\n      // You might be wondering why there's a `while` loop here. Changes can\n      // be recursively nested within `\"change\"` events.\n      if (changing) return this;\n      if (!silent) {\n        while (this._pending) {\n          options = this._pending;\n          this._pending = false;\n          this.trigger('change', this, options);\n        }\n      }\n      this._pending = false;\n      this._changing = false;\n      return this;\n    },\n\n    // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\n    // if the attribute doesn't exist.\n    unset: function(attr, options) {\n      return this.set(attr, void 0, _.extend({}, options, {unset: true}));\n    },\n\n    // Clear all attributes on the model, firing `\"change\"`.\n    clear: function(options) {\n      var attrs = {};\n      for (var key in this.attributes) attrs[key] = void 0;\n      return this.set(attrs, _.extend({}, options, {unset: true}));\n    },\n\n    // Determine if the model has changed since the last `\"change\"` event.\n    // If you specify an attribute name, determine if that attribute has changed.\n    hasChanged: function(attr) {\n      if (attr == null) return !_.isEmpty(this.changed);\n      return _.has(this.changed, attr);\n    },\n\n    // Return an object containing all the attributes that have changed, or\n    // false if there are no changed attributes. Useful for determining what\n    // parts of a view need to be updated and/or what attributes need to be\n    // persisted to the server. Unset attributes will be set to undefined.\n    // You can also pass an attributes object to diff against the model,\n    // determining if there *would be* a change.\n    changedAttributes: function(diff) {\n      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\n      var old = this._changing ? this._previousAttributes : this.attributes;\n      var changed = {};\n      for (var attr in diff) {\n        var val = diff[attr];\n        if (_.isEqual(old[attr], val)) continue;\n        changed[attr] = val;\n      }\n      return _.size(changed) ? changed : false;\n    },\n\n    // Get the previous value of an attribute, recorded at the time the last\n    // `\"change\"` event was fired.\n    previous: function(attr) {\n      if (attr == null || !this._previousAttributes) return null;\n      return this._previousAttributes[attr];\n    },\n\n    // Get all of the attributes of the model at the time of the previous\n    // `\"change\"` event.\n    previousAttributes: function() {\n      return _.clone(this._previousAttributes);\n    },\n\n    // Fetch the model from the server, merging the response with the model's\n    // local attributes. Any changed attributes will trigger a \"change\" event.\n    fetch: function(options) {\n      options = _.extend({parse: true}, options);\n      var model = this;\n      var success = options.success;\n      options.success = function(resp) {\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n        if (!model.set(serverAttrs, options)) return false;\n        if (success) success.call(options.context, model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Set a hash of model attributes, and sync the model to the server.\n    // If the server returns an attributes hash that differs, the model's\n    // state will be `set` again.\n    save: function(key, val, options) {\n      // Handle both `\"key\", value` and `{key: value}` -style arguments.\n      var attrs;\n      if (key == null || typeof key === 'object') {\n        attrs = key;\n        options = val;\n      } else {\n        (attrs = {})[key] = val;\n      }\n\n      options = _.extend({validate: true, parse: true}, options);\n      var wait = options.wait;\n\n      // If we're not waiting and attributes exist, save acts as\n      // `set(attr).save(null, opts)` with validation. Otherwise, check if\n      // the model will be valid when the attributes, if any, are set.\n      if (attrs && !wait) {\n        if (!this.set(attrs, options)) return false;\n      } else {\n        if (!this._validate(attrs, options)) return false;\n      }\n\n      // After a successful server-side save, the client is (optionally)\n      // updated with the server-side state.\n      var model = this;\n      var success = options.success;\n      var attributes = this.attributes;\n      options.success = function(resp) {\n        // Ensure attributes are restored during synchronous saves.\n        model.attributes = attributes;\n        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n        if (wait) serverAttrs = _.extend({}, attrs, serverAttrs);\n        if (serverAttrs && !model.set(serverAttrs, options)) return false;\n        if (success) success.call(options.context, model, resp, options);\n        model.trigger('sync', model, resp, options);\n      };\n      wrapError(this, options);\n\n      // Set temporary attributes if `{wait: true}` to properly find new ids.\n      if (attrs && wait) this.attributes = _.extend({}, attributes, attrs);\n\n      var method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\n      if (method === 'patch' && !options.attrs) options.attrs = attrs;\n      var xhr = this.sync(method, this, options);\n\n      // Restore attributes.\n      this.attributes = attributes;\n\n      return xhr;\n    },\n\n    // Destroy this model on the server if it was already persisted.\n    // Optimistically removes the model from its collection, if it has one.\n    // If `wait: true` is passed, waits for the server to respond before removal.\n    destroy: function(options) {\n      options = options ? _.clone(options) : {};\n      var model = this;\n      var success = options.success;\n      var wait = options.wait;\n\n      var destroy = function() {\n        model.stopListening();\n        model.trigger('destroy', model, model.collection, options);\n      };\n\n      options.success = function(resp) {\n        if (wait) destroy();\n        if (success) success.call(options.context, model, resp, options);\n        if (!model.isNew()) model.trigger('sync', model, resp, options);\n      };\n\n      var xhr = false;\n      if (this.isNew()) {\n        _.defer(options.success);\n      } else {\n        wrapError(this, options);\n        xhr = this.sync('delete', this, options);\n      }\n      if (!wait) destroy();\n      return xhr;\n    },\n\n    // Default URL for the model's representation on the server -- if you're\n    // using Backbone's restful methods, override this to change the endpoint\n    // that will be called.\n    url: function() {\n      var base =\n        _.result(this, 'urlRoot') ||\n        _.result(this.collection, 'url') ||\n        urlError();\n      if (this.isNew()) return base;\n      var id = this.get(this.idAttribute);\n      return base.replace(/[^\\/]$/, '$&/') + encodeURIComponent(id);\n    },\n\n    // **parse** converts a response into the hash of attributes to be `set` on\n    // the model. The default implementation is just to pass the response along.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new model with identical attributes to this one.\n    clone: function() {\n      return new this.constructor(this.attributes);\n    },\n\n    // A model is new if it has never been saved to the server, and lacks an id.\n    isNew: function() {\n      return !this.has(this.idAttribute);\n    },\n\n    // Check if the model is currently in a valid state.\n    isValid: function(options) {\n      return this._validate({}, _.defaults({validate: true}, options));\n    },\n\n    // Run validation against the next complete set of model attributes,\n    // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\n    _validate: function(attrs, options) {\n      if (!options.validate || !this.validate) return true;\n      attrs = _.extend({}, this.attributes, attrs);\n      var error = this.validationError = this.validate(attrs, options) || null;\n      if (!error) return true;\n      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));\n      return false;\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Model.\n  var modelMethods = { keys: 1, values: 1, pairs: 1, invert: 1, pick: 0,\n      omit: 0, chain: 1, isEmpty: 1 };\n\n  // Mix in each Underscore method as a proxy to `Model#attributes`.\n  addUnderscoreMethods(Model, modelMethods, 'attributes');\n\n  // Backbone.Collection\n  // -------------------\n\n  // If models tend to represent a single row of data, a Backbone Collection is\n  // more analogous to a table full of data ... or a small slice or page of that\n  // table, or a collection of rows that belong together for a particular reason\n  // -- all of the messages in this particular folder, all of the documents\n  // belonging to this particular author, and so on. Collections maintain\n  // indexes of their models, both in order, and for lookup by `id`.\n\n  // Create a new **Collection**, perhaps to contain a specific type of `model`.\n  // If a `comparator` is specified, the Collection will maintain\n  // its models in sort order, as they're added and removed.\n  var Collection = Backbone.Collection = function(models, options) {\n    options || (options = {});\n    if (options.model) this.model = options.model;\n    if (options.comparator !== void 0) this.comparator = options.comparator;\n    this._reset();\n    this.initialize.apply(this, arguments);\n    if (models) this.reset(models, _.extend({silent: true}, options));\n  };\n\n  // Default options for `Collection#set`.\n  var setOptions = {add: true, remove: true, merge: true};\n  var addOptions = {add: true, remove: false};\n\n  // Define the Collection's inheritable methods.\n  _.extend(Collection.prototype, Events, {\n\n    // The default model for a collection is just a **Backbone.Model**.\n    // This should be overridden in most cases.\n    model: Model,\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // The JSON representation of a Collection is an array of the\n    // models' attributes.\n    toJSON: function(options) {\n      return this.map(function(model) { return model.toJSON(options); });\n    },\n\n    // Proxy `Backbone.sync` by default.\n    sync: function() {\n      return Backbone.sync.apply(this, arguments);\n    },\n\n    // Add a model, or list of models to the set.\n    add: function(models, options) {\n      return this.set(models, _.extend({merge: false}, options, addOptions));\n    },\n\n    // Remove a model, or a list of models from the set.\n    remove: function(models, options) {\n      options = _.extend({}, options);\n      var singular = !_.isArray(models);\n      models = singular ? [models] : _.clone(models);\n      var removed = this._removeModels(models, options);\n      if (!options.silent && removed) this.trigger('update', this, options);\n      return singular ? removed[0] : removed;\n    },\n\n    // Update a collection by `set`-ing a new list of models, adding new ones,\n    // removing models that are no longer present, and merging models that\n    // already exist in the collection, as necessary. Similar to **Model#set**,\n    // the core operation for updating the data contained by the collection.\n    set: function(models, options) {\n      options = _.defaults({}, options, setOptions);\n      if (options.parse && !this._isModel(models)) models = this.parse(models, options);\n      var singular = !_.isArray(models);\n      models = singular ? (models ? [models] : []) : models.slice();\n      var id, model, attrs, existing, sort;\n      var at = options.at;\n      if (at != null) at = +at;\n      if (at < 0) at += this.length + 1;\n      var sortable = this.comparator && (at == null) && options.sort !== false;\n      var sortAttr = _.isString(this.comparator) ? this.comparator : null;\n      var toAdd = [], toRemove = [], modelMap = {};\n      var add = options.add, merge = options.merge, remove = options.remove;\n      var order = !sortable && add && remove ? [] : false;\n      var orderChanged = false;\n\n      // Turn bare objects into model references, and prevent invalid models\n      // from being added.\n      for (var i = 0; i < models.length; i++) {\n        attrs = models[i];\n\n        // If a duplicate is found, prevent it from being added and\n        // optionally merge it into the existing model.\n        if (existing = this.get(attrs)) {\n          if (remove) modelMap[existing.cid] = true;\n          if (merge && attrs !== existing) {\n            attrs = this._isModel(attrs) ? attrs.attributes : attrs;\n            if (options.parse) attrs = existing.parse(attrs, options);\n            existing.set(attrs, options);\n            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;\n          }\n          models[i] = existing;\n\n        // If this is a new, valid model, push it to the `toAdd` list.\n        } else if (add) {\n          model = models[i] = this._prepareModel(attrs, options);\n          if (!model) continue;\n          toAdd.push(model);\n          this._addReference(model, options);\n        }\n\n        // Do not add multiple models with the same `id`.\n        model = existing || model;\n        if (!model) continue;\n        id = this.modelId(model.attributes);\n        if (order && (model.isNew() || !modelMap[id])) {\n          order.push(model);\n\n          // Check to see if this is actually a new model at this index.\n          orderChanged = orderChanged || !this.models[i] || model.cid !== this.models[i].cid;\n        }\n\n        modelMap[id] = true;\n      }\n\n      // Remove nonexistent models if appropriate.\n      if (remove) {\n        for (var i = 0; i < this.length; i++) {\n          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);\n        }\n        if (toRemove.length) this._removeModels(toRemove, options);\n      }\n\n      // See if sorting is needed, update `length` and splice in new models.\n      if (toAdd.length || orderChanged) {\n        if (sortable) sort = true;\n        this.length += toAdd.length;\n        if (at != null) {\n          for (var i = 0; i < toAdd.length; i++) {\n            this.models.splice(at + i, 0, toAdd[i]);\n          }\n        } else {\n          if (order) this.models.length = 0;\n          var orderedModels = order || toAdd;\n          for (var i = 0; i < orderedModels.length; i++) {\n            this.models.push(orderedModels[i]);\n          }\n        }\n      }\n\n      // Silently sort the collection if appropriate.\n      if (sort) this.sort({silent: true});\n\n      // Unless silenced, it's time to fire all appropriate add/sort events.\n      if (!options.silent) {\n        var addOpts = at != null ? _.clone(options) : options;\n        for (var i = 0; i < toAdd.length; i++) {\n          if (at != null) addOpts.index = at + i;\n          (model = toAdd[i]).trigger('add', model, this, addOpts);\n        }\n        if (sort || orderChanged) this.trigger('sort', this, options);\n        if (toAdd.length || toRemove.length) this.trigger('update', this, options);\n      }\n\n      // Return the added (or merged) model (or models).\n      return singular ? models[0] : models;\n    },\n\n    // When you have more items than you want to add or remove individually,\n    // you can reset the entire set with a new list of models, without firing\n    // any granular `add` or `remove` events. Fires `reset` when finished.\n    // Useful for bulk operations and optimizations.\n    reset: function(models, options) {\n      options = options ? _.clone(options) : {};\n      for (var i = 0; i < this.models.length; i++) {\n        this._removeReference(this.models[i], options);\n      }\n      options.previousModels = this.models;\n      this._reset();\n      models = this.add(models, _.extend({silent: true}, options));\n      if (!options.silent) this.trigger('reset', this, options);\n      return models;\n    },\n\n    // Add a model to the end of the collection.\n    push: function(model, options) {\n      return this.add(model, _.extend({at: this.length}, options));\n    },\n\n    // Remove a model from the end of the collection.\n    pop: function(options) {\n      var model = this.at(this.length - 1);\n      return this.remove(model, options);\n    },\n\n    // Add a model to the beginning of the collection.\n    unshift: function(model, options) {\n      return this.add(model, _.extend({at: 0}, options));\n    },\n\n    // Remove a model from the beginning of the collection.\n    shift: function(options) {\n      var model = this.at(0);\n      return this.remove(model, options);\n    },\n\n    // Slice out a sub-array of models from the collection.\n    slice: function() {\n      return slice.apply(this.models, arguments);\n    },\n\n    // Get a model from the set by id.\n    get: function(obj) {\n      if (obj == null) return void 0;\n      var id = this.modelId(this._isModel(obj) ? obj.attributes : obj);\n      return this._byId[obj] || this._byId[id] || this._byId[obj.cid];\n    },\n\n    // Get the model at the given index.\n    at: function(index) {\n      if (index < 0) index += this.length;\n      return this.models[index];\n    },\n\n    // Return models with matching attributes. Useful for simple cases of\n    // `filter`.\n    where: function(attrs, first) {\n      var matches = _.matches(attrs);\n      return this[first ? 'find' : 'filter'](function(model) {\n        return matches(model.attributes);\n      });\n    },\n\n    // Return the first model with matching attributes. Useful for simple cases\n    // of `find`.\n    findWhere: function(attrs) {\n      return this.where(attrs, true);\n    },\n\n    // Force the collection to re-sort itself. You don't need to call this under\n    // normal circumstances, as the set will maintain sort order as each item\n    // is added.\n    sort: function(options) {\n      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');\n      options || (options = {});\n\n      // Run sort based on type of `comparator`.\n      if (_.isString(this.comparator) || this.comparator.length === 1) {\n        this.models = this.sortBy(this.comparator, this);\n      } else {\n        this.models.sort(_.bind(this.comparator, this));\n      }\n\n      if (!options.silent) this.trigger('sort', this, options);\n      return this;\n    },\n\n    // Pluck an attribute from each model in the collection.\n    pluck: function(attr) {\n      return _.invoke(this.models, 'get', attr);\n    },\n\n    // Fetch the default set of models for this collection, resetting the\n    // collection when they arrive. If `reset: true` is passed, the response\n    // data will be passed through the `reset` method instead of `set`.\n    fetch: function(options) {\n      options = _.extend({parse: true}, options);\n      var success = options.success;\n      var collection = this;\n      options.success = function(resp) {\n        var method = options.reset ? 'reset' : 'set';\n        collection[method](resp, options);\n        if (success) success.call(options.context, collection, resp, options);\n        collection.trigger('sync', collection, resp, options);\n      };\n      wrapError(this, options);\n      return this.sync('read', this, options);\n    },\n\n    // Create a new instance of a model in this collection. Add the model to the\n    // collection immediately, unless `wait: true` is passed, in which case we\n    // wait for the server to agree.\n    create: function(model, options) {\n      options = options ? _.clone(options) : {};\n      var wait = options.wait;\n      model = this._prepareModel(model, options);\n      if (!model) return false;\n      if (!wait) this.add(model, options);\n      var collection = this;\n      var success = options.success;\n      options.success = function(model, resp, callbackOpts) {\n        if (wait) collection.add(model, callbackOpts);\n        if (success) success.call(callbackOpts.context, model, resp, callbackOpts);\n      };\n      model.save(null, options);\n      return model;\n    },\n\n    // **parse** converts a response into a list of models to be added to the\n    // collection. The default implementation is just to pass it through.\n    parse: function(resp, options) {\n      return resp;\n    },\n\n    // Create a new collection with an identical list of models as this one.\n    clone: function() {\n      return new this.constructor(this.models, {\n        model: this.model,\n        comparator: this.comparator\n      });\n    },\n\n    // Define how to uniquely identify models in the collection.\n    modelId: function (attrs) {\n      return attrs[this.model.prototype.idAttribute || 'id'];\n    },\n\n    // Private method to reset all internal state. Called when the collection\n    // is first initialized or reset.\n    _reset: function() {\n      this.length = 0;\n      this.models = [];\n      this._byId  = {};\n    },\n\n    // Prepare a hash of attributes (or other model) to be added to this\n    // collection.\n    _prepareModel: function(attrs, options) {\n      if (this._isModel(attrs)) {\n        if (!attrs.collection) attrs.collection = this;\n        return attrs;\n      }\n      options = options ? _.clone(options) : {};\n      options.collection = this;\n      var model = new this.model(attrs, options);\n      if (!model.validationError) return model;\n      this.trigger('invalid', this, model.validationError, options);\n      return false;\n    },\n\n    // Internal method called by both remove and set.\n    // Returns removed models, or false if nothing is removed.\n    _removeModels: function(models, options) {\n      var removed = [];\n      for (var i = 0; i < models.length; i++) {\n        var model = this.get(models[i]);\n        if (!model) continue;\n\n        var index = this.indexOf(model);\n        this.models.splice(index, 1);\n        this.length--;\n\n        if (!options.silent) {\n          options.index = index;\n          model.trigger('remove', model, this, options);\n        }\n\n        removed.push(model);\n        this._removeReference(model, options);\n      }\n      return removed.length ? removed : false;\n    },\n\n    // Method for checking whether an object should be considered a model for\n    // the purposes of adding to the collection.\n    _isModel: function (model) {\n      return model instanceof Model;\n    },\n\n    // Internal method to create a model's ties to a collection.\n    _addReference: function(model, options) {\n      this._byId[model.cid] = model;\n      var id = this.modelId(model.attributes);\n      if (id != null) this._byId[id] = model;\n      model.on('all', this._onModelEvent, this);\n    },\n\n    // Internal method to sever a model's ties to a collection.\n    _removeReference: function(model, options) {\n      delete this._byId[model.cid];\n      var id = this.modelId(model.attributes);\n      if (id != null) delete this._byId[id];\n      if (this === model.collection) delete model.collection;\n      model.off('all', this._onModelEvent, this);\n    },\n\n    // Internal method called every time a model in the set fires an event.\n    // Sets need to update their indexes when models change ids. All other\n    // events simply proxy through. \"add\" and \"remove\" events that originate\n    // in other collections are ignored.\n    _onModelEvent: function(event, model, collection, options) {\n      if ((event === 'add' || event === 'remove') && collection !== this) return;\n      if (event === 'destroy') this.remove(model, options);\n      if (event === 'change') {\n        var prevId = this.modelId(model.previousAttributes());\n        var id = this.modelId(model.attributes);\n        if (prevId !== id) {\n          if (prevId != null) delete this._byId[prevId];\n          if (id != null) this._byId[id] = model;\n        }\n      }\n      this.trigger.apply(this, arguments);\n    }\n\n  });\n\n  // Underscore methods that we want to implement on the Collection.\n  // 90% of the core usefulness of Backbone Collections is actually implemented\n  // right here:\n  var collectionMethods = { forEach: 3, each: 3, map: 3, collect: 3, reduce: 4,\n      foldl: 4, inject: 4, reduceRight: 4, foldr: 4, find: 3, detect: 3, filter: 3,\n      select: 3, reject: 3, every: 3, all: 3, some: 3, any: 3, include: 2,\n      contains: 2, invoke: 0, max: 3, min: 3, toArray: 1, size: 1, first: 3,\n      head: 3, take: 3, initial: 3, rest: 3, tail: 3, drop: 3, last: 3,\n      without: 0, difference: 0, indexOf: 3, shuffle: 1, lastIndexOf: 3,\n      isEmpty: 1, chain: 1, sample: 3, partition: 3 };\n\n  // Mix in each Underscore method as a proxy to `Collection#models`.\n  addUnderscoreMethods(Collection, collectionMethods, 'models');\n\n  // Underscore methods that take a property name as an argument.\n  var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];\n\n  // Use attributes instead of properties.\n  _.each(attributeMethods, function(method) {\n    if (!_[method]) return;\n    Collection.prototype[method] = function(value, context) {\n      var iterator = _.isFunction(value) ? value : function(model) {\n        return model.get(value);\n      };\n      return _[method](this.models, iterator, context);\n    };\n  });\n\n  // Backbone.View\n  // -------------\n\n  // Backbone Views are almost more convention than they are actual code. A View\n  // is simply a JavaScript object that represents a logical chunk of UI in the\n  // DOM. This might be a single item, an entire list, a sidebar or panel, or\n  // even the surrounding frame which wraps your whole app. Defining a chunk of\n  // UI as a **View** allows you to define your DOM events declaratively, without\n  // having to worry about render order ... and makes it easy for the view to\n  // react to specific changes in the state of your models.\n\n  // Creating a Backbone.View creates its initial element outside of the DOM,\n  // if an existing element is not provided...\n  var View = Backbone.View = function(options) {\n    this.cid = _.uniqueId('view');\n    _.extend(this, _.pick(options, viewOptions));\n    this._ensureElement();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regex to split keys for `delegate`.\n  var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n  // List of view options to be merged as properties.\n  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\n\n  // Set up all inheritable **Backbone.View** properties and methods.\n  _.extend(View.prototype, Events, {\n\n    // The default `tagName` of a View's element is `\"div\"`.\n    tagName: 'div',\n\n    // jQuery delegate for element lookup, scoped to DOM elements within the\n    // current view. This should be preferred to global lookups where possible.\n    $: function(selector) {\n      return this.$el.find(selector);\n    },\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // **render** is the core function that your view should override, in order\n    // to populate its element (`this.el`), with the appropriate HTML. The\n    // convention is for **render** to always return `this`.\n    render: function() {\n      return this;\n    },\n\n    // Remove this view by taking the element out of the DOM, and removing any\n    // applicable Backbone.Events listeners.\n    remove: function() {\n      this._removeElement();\n      this.stopListening();\n      return this;\n    },\n\n    // Remove this view's element from the document and all event listeners\n    // attached to it. Exposed for subclasses using an alternative DOM\n    // manipulation API.\n    _removeElement: function() {\n      this.$el.remove();\n    },\n\n    // Change the view's element (`this.el` property) and re-delegate the\n    // view's events on the new element.\n    setElement: function(element) {\n      this.undelegateEvents();\n      this._setElement(element);\n      this.delegateEvents();\n      return this;\n    },\n\n    // Creates the `this.el` and `this.$el` references for this view using the\n    // given `el`. `el` can be a CSS selector or an HTML string, a jQuery\n    // context or an element. Subclasses can override this to utilize an\n    // alternative DOM manipulation API and are only required to set the\n    // `this.el` property.\n    _setElement: function(el) {\n      this.$el = el instanceof Backbone.$ ? el : Backbone.$(el);\n      this.el = this.$el[0];\n    },\n\n    // Set callbacks, where `this.events` is a hash of\n    //\n    // *{\"event selector\": \"callback\"}*\n    //\n    //     {\n    //       'mousedown .title':  'edit',\n    //       'click .button':     'save',\n    //       'click .open':       function(e) { ... }\n    //     }\n    //\n    // pairs. Callbacks will be bound to the view, with `this` set properly.\n    // Uses event delegation for efficiency.\n    // Omitting the selector binds the event to `this.el`.\n    delegateEvents: function(events) {\n      events || (events = _.result(this, 'events'));\n      if (!events) return this;\n      this.undelegateEvents();\n      for (var key in events) {\n        var method = events[key];\n        if (!_.isFunction(method)) method = this[method];\n        if (!method) continue;\n        var match = key.match(delegateEventSplitter);\n        this.delegate(match[1], match[2], _.bind(method, this));\n      }\n      return this;\n    },\n\n    // Add a single event listener to the view's element (or a child element\n    // using `selector`). This only works for delegate-able events: not `focus`,\n    // `blur`, and not `change`, `submit`, and `reset` in Internet Explorer.\n    delegate: function(eventName, selector, listener) {\n      this.$el.on(eventName + '.delegateEvents' + this.cid, selector, listener);\n      return this;\n    },\n\n    // Clears all callbacks previously bound to the view by `delegateEvents`.\n    // You usually don't need to use this, but may wish to if you have multiple\n    // Backbone views attached to the same DOM element.\n    undelegateEvents: function() {\n      if (this.$el) this.$el.off('.delegateEvents' + this.cid);\n      return this;\n    },\n\n    // A finer-grained `undelegateEvents` for removing a single delegated event.\n    // `selector` and `listener` are both optional.\n    undelegate: function(eventName, selector, listener) {\n      this.$el.off(eventName + '.delegateEvents' + this.cid, selector, listener);\n      return this;\n    },\n\n    // Produces a DOM element to be assigned to your view. Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _createElement: function(tagName) {\n      return document.createElement(tagName);\n    },\n\n    // Ensure that the View has a DOM element to render into.\n    // If `this.el` is a string, pass it through `$()`, take the first\n    // matching element, and re-assign it to `el`. Otherwise, create\n    // an element from the `id`, `className` and `tagName` properties.\n    _ensureElement: function() {\n      if (!this.el) {\n        var attrs = _.extend({}, _.result(this, 'attributes'));\n        if (this.id) attrs.id = _.result(this, 'id');\n        if (this.className) attrs['class'] = _.result(this, 'className');\n        this.setElement(this._createElement(_.result(this, 'tagName')));\n        this._setAttributes(attrs);\n      } else {\n        this.setElement(_.result(this, 'el'));\n      }\n    },\n\n    // Set attributes from a hash on this view's element.  Exposed for\n    // subclasses using an alternative DOM manipulation API.\n    _setAttributes: function(attributes) {\n      this.$el.attr(attributes);\n    }\n\n  });\n\n  // Backbone.sync\n  // -------------\n\n  // Override this function to change the manner in which Backbone persists\n  // models to the server. You will be passed the type of request, and the\n  // model in question. By default, makes a RESTful Ajax request\n  // to the model's `url()`. Some possible customizations could be:\n  //\n  // * Use `setTimeout` to batch rapid-fire updates into a single request.\n  // * Send up the models as XML instead of JSON.\n  // * Persist models via WebSockets instead of Ajax.\n  //\n  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n  // as `POST`, with a `_method` parameter containing the true HTTP method,\n  // as well as all requests with the body as `application/x-www-form-urlencoded`\n  // instead of `application/json` with the model in a param named `model`.\n  // Useful when interfacing with server-side languages like **PHP** that make\n  // it difficult to read the body of `PUT` requests.\n  Backbone.sync = function(method, model, options) {\n    var type = methodMap[method];\n\n    // Default options, unless specified.\n    _.defaults(options || (options = {}), {\n      emulateHTTP: Backbone.emulateHTTP,\n      emulateJSON: Backbone.emulateJSON\n    });\n\n    // Default JSON-request options.\n    var params = {type: type, dataType: 'json'};\n\n    // Ensure that we have a URL.\n    if (!options.url) {\n      params.url = _.result(model, 'url') || urlError();\n    }\n\n    // Ensure that we have the appropriate request data.\n    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\n      params.contentType = 'application/json';\n      params.data = JSON.stringify(options.attrs || model.toJSON(options));\n    }\n\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\n    if (options.emulateJSON) {\n      params.contentType = 'application/x-www-form-urlencoded';\n      params.data = params.data ? {model: params.data} : {};\n    }\n\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n    // And an `X-HTTP-Method-Override` header.\n    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\n      params.type = 'POST';\n      if (options.emulateJSON) params.data._method = type;\n      var beforeSend = options.beforeSend;\n      options.beforeSend = function(xhr) {\n        xhr.setRequestHeader('X-HTTP-Method-Override', type);\n        if (beforeSend) return beforeSend.apply(this, arguments);\n      };\n    }\n\n    // Don't process data on a non-GET request.\n    if (params.type !== 'GET' && !options.emulateJSON) {\n      params.processData = false;\n    }\n\n    // Pass along `textStatus` and `errorThrown` from jQuery.\n    var error = options.error;\n    options.error = function(xhr, textStatus, errorThrown) {\n      options.textStatus = textStatus;\n      options.errorThrown = errorThrown;\n      if (error) error.call(options.context, xhr, textStatus, errorThrown);\n    };\n\n    // Make the request, allowing the user to override any Ajax options.\n    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\n    model.trigger('request', model, xhr, options);\n    return xhr;\n  };\n\n  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\n  var methodMap = {\n    'create': 'POST',\n    'update': 'PUT',\n    'patch':  'PATCH',\n    'delete': 'DELETE',\n    'read':   'GET'\n  };\n\n  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.\n  // Override this if you'd like to use a different library.\n  Backbone.ajax = function() {\n    return Backbone.$.ajax.apply(Backbone.$, arguments);\n  };\n\n  // Backbone.Router\n  // ---------------\n\n  // Routers map faux-URLs to actions, and fire events when routes are\n  // matched. Creating a new one sets its `routes` hash, if not set statically.\n  var Router = Backbone.Router = function(options) {\n    options || (options = {});\n    if (options.routes) this.routes = options.routes;\n    this._bindRoutes();\n    this.initialize.apply(this, arguments);\n  };\n\n  // Cached regular expressions for matching named param parts and splatted\n  // parts of route strings.\n  var optionalParam = /\\((.*?)\\)/g;\n  var namedParam    = /(\\(\\?)?:\\w+/g;\n  var splatParam    = /\\*\\w+/g;\n  var escapeRegExp  = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n  // Set up all inheritable **Backbone.Router** properties and methods.\n  _.extend(Router.prototype, Events, {\n\n    // Initialize is an empty function by default. Override it with your own\n    // initialization logic.\n    initialize: function(){},\n\n    // Manually bind a single named route to a callback. For example:\n    //\n    //     this.route('search/:query/p:num', 'search', function(query, num) {\n    //       ...\n    //     });\n    //\n    route: function(route, name, callback) {\n      if (!_.isRegExp(route)) route = this._routeToRegExp(route);\n      if (_.isFunction(name)) {\n        callback = name;\n        name = '';\n      }\n      if (!callback) callback = this[name];\n      var router = this;\n      Backbone.history.route(route, function(fragment) {\n        var args = router._extractParameters(route, fragment);\n        if (router.execute(callback, args, name) !== false) {\n          router.trigger.apply(router, ['route:' + name].concat(args));\n          router.trigger('route', name, args);\n          Backbone.history.trigger('route', router, name, args);\n        }\n      });\n      return this;\n    },\n\n    // Execute a route handler with the provided parameters.  This is an\n    // excellent place to do pre-route setup or post-route cleanup.\n    execute: function(callback, args, name) {\n      if (callback) callback.apply(this, args);\n    },\n\n    // Simple proxy to `Backbone.history` to save a fragment into the history.\n    navigate: function(fragment, options) {\n      Backbone.history.navigate(fragment, options);\n      return this;\n    },\n\n    // Bind all defined routes to `Backbone.history`. We have to reverse the\n    // order of the routes here to support behavior where the most general\n    // routes can be defined at the bottom of the route map.\n    _bindRoutes: function() {\n      if (!this.routes) return;\n      this.routes = _.result(this, 'routes');\n      var route, routes = _.keys(this.routes);\n      while ((route = routes.pop()) != null) {\n        this.route(route, this.routes[route]);\n      }\n    },\n\n    // Convert a route string into a regular expression, suitable for matching\n    // against the current location hash.\n    _routeToRegExp: function(route) {\n      route = route.replace(escapeRegExp, '\\\\$&')\n                   .replace(optionalParam, '(?:$1)?')\n                   .replace(namedParam, function(match, optional) {\n                     return optional ? match : '([^/?]+)';\n                   })\n                   .replace(splatParam, '([^?]*?)');\n      return new RegExp('^' + route + '(?:\\\\?([\\\\s\\\\S]*))?$');\n    },\n\n    // Given a route, and a URL fragment that it matches, return the array of\n    // extracted decoded parameters. Empty or unmatched parameters will be\n    // treated as `null` to normalize cross-browser behavior.\n    _extractParameters: function(route, fragment) {\n      var params = route.exec(fragment).slice(1);\n      return _.map(params, function(param, i) {\n        // Don't decode the search params.\n        if (i === params.length - 1) return param || null;\n        return param ? decodeURIComponent(param) : null;\n      });\n    }\n\n  });\n\n  // Backbone.History\n  // ----------------\n\n  // Handles cross-browser history management, based on either\n  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or\n  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\n  // and URL fragments. If the browser supports neither (old IE, natch),\n  // falls back to polling.\n  var History = Backbone.History = function() {\n    this.handlers = [];\n    _.bindAll(this, 'checkUrl');\n\n    // Ensure that `History` can be used outside of the browser.\n    if (typeof window !== 'undefined') {\n      this.location = window.location;\n      this.history = window.history;\n    }\n  };\n\n  // Cached regex for stripping a leading hash/slash and trailing space.\n  var routeStripper = /^[#\\/]|\\s+$/g;\n\n  // Cached regex for stripping leading and trailing slashes.\n  var rootStripper = /^\\/+|\\/+$/g;\n\n  // Cached regex for stripping urls of hash.\n  var pathStripper = /#.*$/;\n\n  // Has the history handling already been started?\n  History.started = false;\n\n  // Set up all inheritable **Backbone.History** properties and methods.\n  _.extend(History.prototype, Events, {\n\n    // The default interval to poll for hash changes, if necessary, is\n    // twenty times a second.\n    interval: 50,\n\n    // Are we at the app root?\n    atRoot: function() {\n      var path = this.location.pathname.replace(/[^\\/]$/, '$&/');\n      return path === this.root && !this.getSearch();\n    },\n\n    // Does the pathname match the root?\n    matchRoot: function() {\n      var path = this.decodeFragment(this.location.pathname);\n      var root = path.slice(0, this.root.length - 1) + '/';\n      return root === this.root;\n    },\n\n    // Unicode characters in `location.pathname` are percent encoded so they're\n    // decoded for comparison. `%25` should not be decoded since it may be part\n    // of an encoded parameter.\n    decodeFragment: function(fragment) {\n      return decodeURI(fragment.replace(/%25/g, '%2525'));\n    },\n\n    // In IE6, the hash fragment and search params are incorrect if the\n    // fragment contains `?`.\n    getSearch: function() {\n      var match = this.location.href.replace(/#.*/, '').match(/\\?.+/);\n      return match ? match[0] : '';\n    },\n\n    // Gets the true hash value. Cannot use location.hash directly due to bug\n    // in Firefox where location.hash will always be decoded.\n    getHash: function(window) {\n      var match = (window || this).location.href.match(/#(.*)$/);\n      return match ? match[1] : '';\n    },\n\n    // Get the pathname and search params, without the root.\n    getPath: function() {\n      var path = this.decodeFragment(\n        this.location.pathname + this.getSearch()\n      ).slice(this.root.length - 1);\n      return path.charAt(0) === '/' ? path.slice(1) : path;\n    },\n\n    // Get the cross-browser normalized URL fragment from the path or hash.\n    getFragment: function(fragment) {\n      if (fragment == null) {\n        if (this._usePushState || !this._wantsHashChange) {\n          fragment = this.getPath();\n        } else {\n          fragment = this.getHash();\n        }\n      }\n      return fragment.replace(routeStripper, '');\n    },\n\n    // Start the hash change handling, returning `true` if the current URL matches\n    // an existing route, and `false` otherwise.\n    start: function(options) {\n      if (History.started) throw new Error('Backbone.history has already been started');\n      History.started = true;\n\n      // Figure out the initial configuration. Do we need an iframe?\n      // Is pushState desired ... is it available?\n      this.options          = _.extend({root: '/'}, this.options, options);\n      this.root             = this.options.root;\n      this._wantsHashChange = this.options.hashChange !== false;\n      this._hasHashChange   = 'onhashchange' in window;\n      this._useHashChange   = this._wantsHashChange && this._hasHashChange;\n      this._wantsPushState  = !!this.options.pushState;\n      this._hasPushState    = !!(this.history && this.history.pushState);\n      this._usePushState    = this._wantsPushState && this._hasPushState;\n      this.fragment         = this.getFragment();\n\n      // Normalize root to always include a leading and trailing slash.\n      this.root = ('/' + this.root + '/').replace(rootStripper, '/');\n\n      // Transition from hashChange to pushState or vice versa if both are\n      // requested.\n      if (this._wantsHashChange && this._wantsPushState) {\n\n        // If we've started off with a route from a `pushState`-enabled\n        // browser, but we're currently in a browser that doesn't support it...\n        if (!this._hasPushState && !this.atRoot()) {\n          var root = this.root.slice(0, -1) || '/';\n          this.location.replace(root + '#' + this.getPath());\n          // Return immediately as browser will do redirect to new url\n          return true;\n\n        // Or if we've started out with a hash-based route, but we're currently\n        // in a browser where it could be `pushState`-based instead...\n        } else if (this._hasPushState && this.atRoot()) {\n          this.navigate(this.getHash(), {replace: true});\n        }\n\n      }\n\n      // Proxy an iframe to handle location events if the browser doesn't\n      // support the `hashchange` event, HTML5 history, or the user wants\n      // `hashChange` but not `pushState`.\n      if (!this._hasHashChange && this._wantsHashChange && !this._usePushState) {\n        this.iframe = document.createElement('iframe');\n        this.iframe.src = 'javascript:0';\n        this.iframe.style.display = 'none';\n        this.iframe.tabIndex = -1;\n        var body = document.body;\n        // Using `appendChild` will throw on IE < 9 if the document is not ready.\n        var iWindow = body.insertBefore(this.iframe, body.firstChild).contentWindow;\n        iWindow.document.open();\n        iWindow.document.close();\n        iWindow.location.hash = '#' + this.fragment;\n      }\n\n      // Add a cross-platform `addEventListener` shim for older browsers.\n      var addEventListener = window.addEventListener || function (eventName, listener) {\n        return attachEvent('on' + eventName, listener);\n      };\n\n      // Depending on whether we're using pushState or hashes, and whether\n      // 'onhashchange' is supported, determine how we check the URL state.\n      if (this._usePushState) {\n        addEventListener('popstate', this.checkUrl, false);\n      } else if (this._useHashChange && !this.iframe) {\n        addEventListener('hashchange', this.checkUrl, false);\n      } else if (this._wantsHashChange) {\n        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n      }\n\n      if (!this.options.silent) return this.loadUrl();\n    },\n\n    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n    // but possibly useful for unit testing Routers.\n    stop: function() {\n      // Add a cross-platform `removeEventListener` shim for older browsers.\n      var removeEventListener = window.removeEventListener || function (eventName, listener) {\n        return detachEvent('on' + eventName, listener);\n      };\n\n      // Remove window listeners.\n      if (this._usePushState) {\n        removeEventListener('popstate', this.checkUrl, false);\n      } else if (this._useHashChange && !this.iframe) {\n        removeEventListener('hashchange', this.checkUrl, false);\n      }\n\n      // Clean up the iframe if necessary.\n      if (this.iframe) {\n        document.body.removeChild(this.iframe);\n        this.iframe = null;\n      }\n\n      // Some environments will throw when clearing an undefined interval.\n      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);\n      History.started = false;\n    },\n\n    // Add a route to be tested when the fragment changes. Routes added later\n    // may override previous routes.\n    route: function(route, callback) {\n      this.handlers.unshift({route: route, callback: callback});\n    },\n\n    // Checks the current URL to see if it has changed, and if it has,\n    // calls `loadUrl`, normalizing across the hidden iframe.\n    checkUrl: function(e) {\n      var current = this.getFragment();\n\n      // If the user pressed the back button, the iframe's hash will have\n      // changed and we should use that for comparison.\n      if (current === this.fragment && this.iframe) {\n        current = this.getHash(this.iframe.contentWindow);\n      }\n\n      if (current === this.fragment) return false;\n      if (this.iframe) this.navigate(current);\n      this.loadUrl();\n    },\n\n    // Attempt to load the current URL fragment. If a route succeeds with a\n    // match, returns `true`. If no defined routes matches the fragment,\n    // returns `false`.\n    loadUrl: function(fragment) {\n      // If the root doesn't match, no routes can match either.\n      if (!this.matchRoot()) return false;\n      fragment = this.fragment = this.getFragment(fragment);\n      return _.any(this.handlers, function(handler) {\n        if (handler.route.test(fragment)) {\n          handler.callback(fragment);\n          return true;\n        }\n      });\n    },\n\n    // Save a fragment into the hash history, or replace the URL state if the\n    // 'replace' option is passed. You are responsible for properly URL-encoding\n    // the fragment in advance.\n    //\n    // The options object can contain `trigger: true` if you wish to have the\n    // route callback be fired (not usually desirable), or `replace: true`, if\n    // you wish to modify the current URL without adding an entry to the history.\n    navigate: function(fragment, options) {\n      if (!History.started) return false;\n      if (!options || options === true) options = {trigger: !!options};\n\n      // Normalize the fragment.\n      fragment = this.getFragment(fragment || '');\n\n      // Don't include a trailing slash on the root.\n      var root = this.root;\n      if (fragment === '' || fragment.charAt(0) === '?') {\n        root = root.slice(0, -1) || '/';\n      }\n      var url = root + fragment;\n\n      // Strip the hash and decode for matching.\n      fragment = this.decodeFragment(fragment.replace(pathStripper, ''));\n\n      if (this.fragment === fragment) return;\n      this.fragment = fragment;\n\n      // If pushState is available, we use it to set the fragment as a real URL.\n      if (this._usePushState) {\n        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\n\n      // If hash changes haven't been explicitly disabled, update the hash\n      // fragment to store history.\n      } else if (this._wantsHashChange) {\n        this._updateHash(this.location, fragment, options.replace);\n        if (this.iframe && (fragment !== this.getHash(this.iframe.contentWindow))) {\n          var iWindow = this.iframe.contentWindow;\n\n          // Opening and closing the iframe tricks IE7 and earlier to push a\n          // history entry on hash-tag change.  When replace is true, we don't\n          // want this.\n          if (!options.replace) {\n            iWindow.document.open();\n            iWindow.document.close();\n          }\n\n          this._updateHash(iWindow.location, fragment, options.replace);\n        }\n\n      // If you've told us that you explicitly don't want fallback hashchange-\n      // based history, then `navigate` becomes a page refresh.\n      } else {\n        return this.location.assign(url);\n      }\n      if (options.trigger) return this.loadUrl(fragment);\n    },\n\n    // Update the hash location, either replacing the current entry, or adding\n    // a new one to the browser history.\n    _updateHash: function(location, fragment, replace) {\n      if (replace) {\n        var href = location.href.replace(/(javascript:|#).*$/, '');\n        location.replace(href + '#' + fragment);\n      } else {\n        // Some browsers require that `hash` contains a leading #.\n        location.hash = '#' + fragment;\n      }\n    }\n\n  });\n\n  // Create the default Backbone.history.\n  Backbone.history = new History;\n\n  // Helpers\n  // -------\n\n  // Helper function to correctly set up the prototype chain for subclasses.\n  // Similar to `goog.inherits`, but uses a hash of prototype properties and\n  // class properties to be extended.\n  var extend = function(protoProps, staticProps) {\n    var parent = this;\n    var child;\n\n    // The constructor function for the new subclass is either defined by you\n    // (the \"constructor\" property in your `extend` definition), or defaulted\n    // by us to simply call the parent constructor.\n    if (protoProps && _.has(protoProps, 'constructor')) {\n      child = protoProps.constructor;\n    } else {\n      child = function(){ return parent.apply(this, arguments); };\n    }\n\n    // Add static properties to the constructor function, if supplied.\n    _.extend(child, parent, staticProps);\n\n    // Set the prototype chain to inherit from `parent`, without calling\n    // `parent` constructor function.\n    var Surrogate = function(){ this.constructor = child; };\n    Surrogate.prototype = parent.prototype;\n    child.prototype = new Surrogate;\n\n    // Add prototype properties (instance properties) to the subclass,\n    // if supplied.\n    if (protoProps) _.extend(child.prototype, protoProps);\n\n    // Set a convenience property in case the parent's prototype is needed\n    // later.\n    child.__super__ = parent.prototype;\n\n    return child;\n  };\n\n  // Set up inheritance for the model, collection, router, view and history.\n  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;\n\n  // Throw an error when a URL is needed, and none is supplied.\n  var urlError = function() {\n    throw new Error('A \"url\" property or function must be specified');\n  };\n\n  // Wrap an optional error callback with a fallback error event.\n  var wrapError = function(model, options) {\n    var error = options.error;\n    options.error = function(resp) {\n      if (error) error.call(options.context, model, resp, options);\n      model.trigger('error', model, resp, options);\n    };\n  };\n\n  return Backbone;\n\n}));\n"],"sourceRoot":"/source/"}